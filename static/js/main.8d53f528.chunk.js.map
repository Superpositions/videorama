{"version":3,"sources":["components/YTPlayer/YTPlayer.module.scss","components/SplitPane/SplitPane.module.scss","containers/AddVideoForm/AddVideoForm.module.scss","store/reducers/videos.js","store/actions.js","components/SplitPane/SplitPane.js","containers/AddVideoForm/AddVideoForm.js","components/List/ListItem/ListItem.js","components/List/List.js","components/YTPlayer/YTPlayer.js","FontAwesome.js","App.js","serviceWorker.js","index.js","localStorage.js","components/List/ListItem/ListItem.module.scss"],"names":["module","exports","playerContainer","noVideoSelected","splitPane","leftPane","topPane","botomPane","rightPane","inputContainer","inputLabel","formInput","submitButton","initialState","videos","selectedVideo","reducer","state","arguments","length","undefined","action","type","newSate","payload","Object","objectSpread","concat","toConsumableArray","updatedState","filter","item","videoID","newSelectedVideo","SplitPane","_ref","leftTop","leftBottom","right","react_default","a","createElement","className","classes","FIELDS","AddVideoForm","props","_useState","useState","form","artist","title","submitable","errorMessage","_useState2","slicedToArray","formState","setFormState","videoForm","createRef","hasError","formContent","map","el","idx","toUpperCase","classses","key","name","value","autoComplete","onChange","e","_handleChange","required","_updateError","message","prevState","_extractVideoID","url","match","_e$target","target","invalidUrlErrorMessage","test","_validateInput","defineProperty","_resetForm","current","reset","ref","onSubmit","preventDefault","onVideoSubmited","handleSubmit","disabled","ListItem","data","clickHandler","deleteHandler","video","container","onClick","thumbnail","src","alt","deleteBtnContainer","index_es","icon","List","List_ListItem_ListItem","YTPlayer","onReady","onEnd","isEmptyPlaylist","shouldShowMessage","YouTube","videoId","opts","width","height","playerVars","autoplay","frameBorder","library","add","faTimesCircle","App","continuousPlay","_getInitialVideoID","_this","_validateVideo","some","alert","playNextVideo","previousVideoID","_this$props","selectVideo","nextIndex","findIndex","onVideoReady","event","nextVideoID","loadVideoById","onVideoPlay","previousVideo","getVideoData","video_id","_this$props2","this","addVideo","removeVideo","components_SplitPane_SplitPane","containers_AddVideoForm_AddVideoForm","components_List_List","components_YTPlayer_YTPlayer","Component","connect","dispatch","Boolean","window","location","hostname","storedState","serializedState","localStorage","getItem","JSON","parse","err","console","error","loadState","store","createStore","videosReducer","subscribe","throttle","stringify","setItem","saveState","getState","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8d53f528.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"playerContainer\":\"YTPlayer_playerContainer__2_aEs\",\"noVideoSelected\":\"YTPlayer_noVideoSelected__3qQAg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"splitPane\":\"SplitPane_splitPane__1MI0v\",\"leftPane\":\"SplitPane_leftPane__2-JPN\",\"topPane\":\"SplitPane_topPane__1I4Zz\",\"botomPane\":\"SplitPane_botomPane__2ZPgb\",\"rightPane\":\"SplitPane_rightPane__3wz8Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputContainer\":\"AddVideoForm_inputContainer__3VdN-\",\"inputLabel\":\"AddVideoForm_inputLabel__WlreR\",\"formInput\":\"AddVideoForm_formInput__1uKlu\",\"submitButton\":\"AddVideoForm_submitButton__3cIRV\"};","import * as actionTypes from \"../actions\";\n\nconst initialState = {\n  videos: [],\n  selectedVideo: {}\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.ADD_VIDEO:\n      const newSate = [action.payload];\n      return {\n        ...state,\n        videos: [...state.videos, ...newSate]\n      };\n    case actionTypes.REMOVE_VIDEO:\n      const updatedState = state.videos.filter(item => item.videoID !== action.payload);\n      return {\n        ...state,\n        videos: updatedState\n      };\n    case actionTypes.SELECT_VIDEO:\n      const newSelectedVideo = state.videos.filter(item => item.videoID === action.payload);\n      return {\n          ...state,\n          selectedVideo: newSelectedVideo[0]\n        };\n    default:\n      return { ...state };\n  }\n};\n\nexport default reducer;\n","export const ADD_VIDEO = 'ADD_VIDEO';\nexport const REMOVE_VIDEO = 'REMOVE_VIDEO';\nexport const SELECT_VIDEO = 'SELECT_VIDEO';","import React from \"react\";\nimport classes from \"./SplitPane.module.scss\";\nimport PropTypes from \"prop-types\";\n\nconst SplitPane = ({leftTop, leftBottom, right}) => {\n  return (\n    <div className={classes.splitPane}>\n      <div className={classes.leftPane}>\n        <div className={classes.topPane}>\n        {leftTop}\n        </div>\n        <div className={classes.botomPane}>\n        {leftBottom}\n        </div>\n      </div>\n      <div className={classes.rightPane}>\n        {right}\n      </div>\n    </div>\n  );\n}\n\nSplitPane.propTypes = {\n  leftTop: PropTypes.element,\n  leftBottom: PropTypes.element,\n  right: PropTypes.element\n}\n\nexport default SplitPane;","import React, { useState, createRef } from \"react\";\nimport classses from \"./AddVideoForm.module.scss\";\nimport PropTypes from \"prop-types\";\n\nconst FIELDS = [\"artist\", \"title\", \"videoID\"];\n\nconst AddVideoForm = props => {\n  const [formState, setFormState] = useState({\n    form: {\n      artist: \"\",\n      title: \"\",\n      videoID: \"\"\n    },\n    submitable: false,\n    errorMessage: \"\"\n  });\n\n  let videoForm = createRef();\n\n  const { errorMessage } = formState;\n  const hasError = !!errorMessage.length;\n\n  const formContent = FIELDS.map((el, idx) => {\n    const label = el.toUpperCase;\n    return (\n      <div className={classses.inputContainer} key={idx}>\n        <label className={classses.inputLabel}>\n          {el}\n          <input\n            name={el}\n            type=\"text\"\n            className={classses.formInput}\n            value={formState[el]}\n            autoComplete=\"off\"\n            onChange={e => _handleChange(e)}\n            required\n          />\n        </label>\n      </div>\n    );\n  });\n\n  const _updateError = message => {\n    setFormState(prevState => {\n      return {\n        ...prevState,\n        errorMessage: message\n      };\n    });\n  };\n\n  const _validateInput = (name, value) => {\n    switch (name) {\n      case \"videoID\":\n        let invalidUrlErrorMessage = \"URL is invalid\";\n        if (\n          value.length && /^(https?:\\/\\/)?(www\\.youtube\\.com|youtu\\.?be)\\/.+$/.test(value)\n        ) {\n          invalidUrlErrorMessage = \"\";\n          _updateError(invalidUrlErrorMessage);\n          return true;\n        }\n        _updateError(invalidUrlErrorMessage);\n        return true;\n      default:\n        if (!value.length) {\n          let lengthErrorMessage = \"Please fill out all fields\";\n          _updateError(lengthErrorMessage);\n          return;\n        }\n        _updateError(\"\");\n        return !value.length;\n    }\n  };\n\n  const _extractVideoID = url => {\n    if(!url) return;\n    return url.match(/(^|=|\\/)([0-9A-Za-z_-]{11})(\\/|&|$|\\?|#)/)[2];\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const { onVideoSubmited } = props;\n    const { form } = formState;\n    const videoID =_extractVideoID();\n    const updatedData = {\n      ...form,\n      videoID: _extractVideoID(form.videoID)\n    };\n    onVideoSubmited(updatedData);\n    _resetForm();\n  };\n\n  const _handleChange = e => {\n    const { name, value } = e.target;\n    _validateInput(name, value);\n\n    setFormState(prevState => {\n      return {\n        ...prevState,\n        form: {\n          ...prevState.form,\n          [name]: value\n        }\n      };\n    });\n  };\n\n  const _resetForm = () => {\n    videoForm.current.reset();\n  };\n\n  return (\n    <form ref={videoForm} onSubmit={(e) => handleSubmit(e)}>\n      {formContent}\n      <div className={classses.inputContainer}>\n        {hasError ? errorMessage : null}\n        <button disabled={hasError} className={classses.submitButton} type=\"submit\">\n          Add\n        </button>\n      </div>\n    </form>\n  );\n\n\n};\n\nAddVideoForm.propTypes = {\n  onVideoSubmited: PropTypes.func.isRequired\n}\n\nexport default AddVideoForm;","\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classes from \"./ListItem.module.scss\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nconst ListItem = ({ data, clickHandler, deleteHandler }) => {\n  const {artist, title, videoID} = data;\n  const video = {artist, title, videoID};\n  const _handleDelete = (e) => {\n    e.preventDefault(); \n    deleteHandler(video);\n  }\n\n  return (\n    <div className={classes.container} onClick={() => clickHandler(video)}>\n      <img className={classes.thumbnail} src={`https://img.youtube.com/vi/${videoID}/default.jpg`} alt=\"\"/>\n      <div className={classes.item}>\n        <div>{artist}</div>\n        <div>{title}</div>\n      </div>\n      <div className={classes.deleteBtnContainer} onClick={_handleDelete}>\n        <FontAwesomeIcon icon=\"times-circle\"/>\n      </div>\n    </div>\n  );\n};\n\nListItem.propTypes = {\n  data: PropTypes.any.isRequired,\n  clickHandler: PropTypes.func,\n  deleteHandler: PropTypes.func,\n};\n\nexport default ListItem;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport ListItem from \"./ListItem/ListItem\";\n\nconst List = props => {\n  const { data, clickHandler, deleteHandler} = props;\n  if(data){\n    return data.map((data, idx) => <ListItem key={idx} data={{...data}} deleteHandler={deleteHandler} clickHandler={clickHandler} />);\n  }\n  return null;\n};\n\nList.propTypes = {\n  clickHandler: PropTypes.func,\n  deleteHandler: PropTypes.func,\n  videos: PropTypes.object\n};\n\nexport default List;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classes from \"./YTPlayer.module.scss\";\nimport YouTube from \"react-youtube\";\n\nconst YTPlayer = ({ selectedVideo, onReady, onEnd, isEmptyPlaylist }) => {\n  const { videoID } = selectedVideo || {};\n\n  const opts = {\n    width: \"100%\",\n    height: \"100%\",\n    playerVars: {\n      autoplay: 1,\n      frameBorder: 0\n    }\n  };\n  const shouldShowMessage = videoID;\n  return (\n    <div className={classes.playerContainer}>\n      {!shouldShowMessage ? (\n        <div className={classes.noVideoSelected}>Add videos to start</div>\n      ) : (\n        <YouTube videoId={videoID} onEnd={onEnd} opts={opts} onReady={onReady} />\n      )}\n    </div>\n  );\n};\n\nYTPlayer.propTypes = {\n  selectedVideo: PropTypes.object,\n  onReady: PropTypes.func.isRequired,\n  onEnd: PropTypes.func.isRequired,\n  isEmptyPlaylist: PropTypes.bool.isRequired\n};\n\nexport default YTPlayer;\n","import { library } from '@fortawesome/fontawesome-svg-core';\nimport { faTimesCircle } from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(faTimesCircle);","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport SplitPane from \"./components/SplitPane/SplitPane\";\nimport AddVideoForm from \"./containers/AddVideoForm/AddVideoForm\";\nimport List from \"./components/List/List\";\nimport YTPlayer from \"./components/YTPlayer/YTPlayer\";\nimport fa from \"./FontAwesome\";\nimport * as actionTypes from \"./store/actions\";\n\nclass App extends Component {\n  state = {\n    videos: [],\n    selectedVideo: {},\n    isEmptyPlaylist: true,\n    continuousPlay: true\n  };\n\n  _getInitialVideoID = () => {\n    const { videoID } = this.props.selectedVideo;\n    const { continuousPlay } = this.state;\n    if (videoID) {\n      return videoID;\n    } else if (continuousPlay) {\n      const { videos } = this.props;\n      return videos[0].videoID;\n    }\n  };\n\n  _validateVideo = videoID =>\n    this.props.videos.some(video => video.videoID === videoID);\n\n  onVideoSubmited = video => {\n    const hasVideo = this._validateVideo(video.videoID);\n    if (hasVideo) {\n      alert(\n        `This video from: ${video.artist} with title: ${video.title} already exists in this playlist.`\n      );\n      return;\n    }\n  };\n\n  playNextVideo = previousVideoID => {\n    const {selectVideo, videos} = this.props;\n    const indexOfCurrent = videos.findIndex(e => {\n      return e.videoID === previousVideoID;\n    });\n    let nextIndex = indexOfCurrent + 1;\n    if (!videos[nextIndex]) {\n      nextIndex = 0;\n    }\n    selectVideo(videos[nextIndex]);\n  };\n\n  // YTPlayler callbacks\n  onVideoReady = event => {\n    const { videos } = this.props;\n    const isEmptyPlaylist = !(videos && videos.length);\n    if (!isEmptyPlaylist) {\n      const nextVideoID = this._getInitialVideoID();\n      event.target.loadVideoById(nextVideoID);\n    }\n  };\n\n  onVideoPlay = selectedVideo => {\n    const { selectVideo } = this.props;\n    selectVideo(selectedVideo);\n  };\n\n  onEnd = event => {\n    const previousVideo = event.target.getVideoData();\n    if (this.state.continuousPlay) {\n      this.playNextVideo(previousVideo.video_id);\n    }\n  };\n\n  render() {\n    const { videos, selectedVideo, addVideo, removeVideo } = this.props;\n    const isEmptyPlaylist = !!(this.videos && !this.videos.length);\n    return (\n      <div className=\"mainContainer\">\n        <SplitPane\n          leftTop={<AddVideoForm onVideoSubmited={addVideo} />}\n          leftBottom={\n            <List\n              clickHandler={this.onVideoPlay}\n              deleteHandler={removeVideo}\n              data={videos}\n            />\n          }\n          right={\n            <YTPlayer\n              isEmptyPlaylist={isEmptyPlaylist}\n              selectedVideo={selectedVideo}\n              onReady={this.onVideoReady}\n              onEnd={this.onEnd}\n            />\n          }\n        />\n      </div>\n    );\n  }\n}\n\nApp.propTypes = {\n  videos: PropTypes.array,\n  selectedVideo: PropTypes.object,\n  selectVideo: PropTypes.func,\n  addVideo: PropTypes.func,\n  removeVideo: PropTypes.func\n};\n\nconst mapStateToProps = state => {\n  return {\n    videos: state.videos,\n    selectedVideo: state.selectedVideo\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addVideo: video =>\n      dispatch({ type: actionTypes.ADD_VIDEO, payload: video }),\n    removeVideo: video =>\n      dispatch({ type: actionTypes.REMOVE_VIDEO, payload: video.videoID }),\n    selectVideo: video => {\n      dispatch({ type: actionTypes.SELECT_VIDEO, payload: video.videoID });\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport throttle from 'lodash/throttle';\n\nimport { createStore } from \"redux\";\n\nimport videosReducer from \"./store/reducers/videos\";\nimport { saveState, loadState } from \"./localStorage\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst storedState = loadState('videorama');\n\nconst store = createStore(videosReducer, storedState);\n\nstore.subscribe(throttle(()=> {\n  const updatedState = store.getState();\n  saveState(\"videorama\", updatedState);\n}), 1000);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const loadState = item => {\n  try {\n    const serializedState = window.localStorage.getItem(item);\n    if (!serializedState) {\n        return undefined;\n    }\n    return JSON.parse(serializedState);\n} catch (err) {\n    console.error(err, \"issues with localStorage\");\n    return undefined;\n  }\n};\n\nexport const saveState = (item, state) => {\n  try {\n    if (!state && state !== \"undefined\") {\n        return undefined;\n    }\n    const serializedState = JSON.stringify(state);\n    window.localStorage.setItem(item, serializedState);\n  } catch (err) {\n    console.error(err, \"issues with localStorage\");\n    return undefined;\n  }\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ListItem_container__1wDrm\",\"item\":\"ListItem_item__El3Yb\",\"deleteBtnContainer\":\"ListItem_deleteBtnContainer__1Kmb_\",\"thumbnail\":\"ListItem_thumbnail__2pBri\"};"],"sourceRoot":""}
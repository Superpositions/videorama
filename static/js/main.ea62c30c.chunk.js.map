{"version":3,"sources":["components/YTPlayer/YTPlayer.module.scss","components/SplitPane/SplitPane.module.scss","containers/AddVideoForm/AddVideoForm.module.scss","store/reducers/videos.js","store/actions.js","components/SplitPane/SplitPane.js","containers/AddVideoForm/AddVideoForm.js","components/List/ListItem/ListItem.js","components/List/List.js","components/YTPlayer/YTPlayer.js","FontAwesome.js","App.js","serviceWorker.js","index.js","localStorage.js","components/List/ListItem/ListItem.module.scss"],"names":["module","exports","playerContainer","noVideoSelected","splitPane","leftPane","topPane","botomPane","rightPane","inputContainer","inputLabel","formInput","submitButton","initialState","videos","selectedVideo","reducer","state","arguments","length","undefined","action","type","newSate","payload","Object","objectSpread","concat","toConsumableArray","updatedState","filter","item","videoID","newSelectedVideo","SplitPane","_ref","leftTop","leftBottom","right","react_default","a","createElement","className","classes","FIELDS","AddVideoForm","props","_useState","useState","form","artist","title","submitable","errorMessage","_useState2","slicedToArray","formState","setFormState","videoForm","createRef","hasError","formContent","map","el","idx","toUpperCase","classses","key","name","value","autoComplete","onChange","e","_handleChange","required","_updateError","message","prevState","_e$target","target","invalidUrlErrorMessage","test","_validateInput","defineProperty","_resetForm","current","reset","ref","onSubmit","preventDefault","url","onVideoSubmited","match","handleSubmit","disabled","ListItem","data","clickHandler","deleteHandler","video","container","onClick","thumbnail","src","alt","deleteBtnContainer","index_es","icon","List","List_ListItem_ListItem","YTPlayer","onReady","onEnd","isEmptyPlaylist","shouldShowMessage","YouTube","videoId","opts","width","height","playerVars","autoplay","frameBorder","library","add","faTimesCircle","App","continuousPlay","_getInitialVideoID","_this","_validateVideo","some","alert","playNextVideo","previousVideo","nextIndex","findIndex","setState","onVideoReady","event","nextVideoID","loadVideoById","onVideoPlay","selectVideo","getVideoData","video_id","_this$props","this","addVideo","removeVideo","components_SplitPane_SplitPane","containers_AddVideoForm_AddVideoForm","components_List_List","components_YTPlayer_YTPlayer","Component","connect","dispatch","Boolean","window","location","hostname","storedState","serializedState","localStorage","getItem","JSON","parse","err","console","error","loadState","store","createStore","videosReducer","subscribe","throttle","stringify","setItem","saveState","getState","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ea62c30c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"playerContainer\":\"YTPlayer_playerContainer__2_aEs\",\"noVideoSelected\":\"YTPlayer_noVideoSelected__3qQAg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"splitPane\":\"SplitPane_splitPane__1MI0v\",\"leftPane\":\"SplitPane_leftPane__2-JPN\",\"topPane\":\"SplitPane_topPane__1I4Zz\",\"botomPane\":\"SplitPane_botomPane__2ZPgb\",\"rightPane\":\"SplitPane_rightPane__3wz8Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputContainer\":\"AddVideoForm_inputContainer__3VdN-\",\"inputLabel\":\"AddVideoForm_inputLabel__WlreR\",\"formInput\":\"AddVideoForm_formInput__1uKlu\",\"submitButton\":\"AddVideoForm_submitButton__3cIRV\"};","import * as actionTypes from \"../actions\";\n\nconst initialState = {\n  videos: [],\n  selectedVideo: {}\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.ADD_VIDEO:\n      const newSate = [action.payload];\n      return {\n        ...state,\n        videos: [...state.videos, ...newSate]\n      };\n    case actionTypes.REMOVE_VIDEO:\n      const updatedState = state.videos.filter(item => item.videoID !== action.payload);\n      return {\n        ...state,\n        videos: updatedState\n      };\n    case actionTypes.SELECT_VIDEO:\n      const newSelectedVideo = state.videos.filter(item => item.videoID === action.payload);\n      return {\n          ...state,\n          selectedVideo: newSelectedVideo[0]\n        };\n    default:\n      return { ...state };\n  }\n};\n\nexport default reducer;\n","export const ADD_VIDEO = 'ADD_VIDEO';\nexport const REMOVE_VIDEO = 'REMOVE_VIDEO';\nexport const SELECT_VIDEO = 'SELECT_VIDEO';","import React from \"react\";\nimport classes from \"./SplitPane.module.scss\";\nimport PropTypes from \"prop-types\";\n\nconst SplitPane = ({leftTop, leftBottom, right}) => {\n  return (\n    <div className={classes.splitPane}>\n      <div className={classes.leftPane}>\n        <div className={classes.topPane}>\n        {leftTop}\n        </div>\n        <div className={classes.botomPane}>\n        {leftBottom}\n        </div>\n      </div>\n      <div className={classes.rightPane}>\n        {right}\n      </div>\n    </div>\n  );\n}\n\nSplitPane.propTypes = {\n  leftTop: PropTypes.element,\n  leftBottom: PropTypes.element,\n  right: PropTypes.element\n}\n\nexport default SplitPane;","import React, { useState, createRef } from \"react\";\nimport classses from \"./AddVideoForm.module.scss\";\nimport PropTypes from \"prop-types\";\n\nconst FIELDS = [\"artist\", \"title\", \"videoID\"];\n\nconst AddVideoForm = props => {\n  const [formState, setFormState] = useState({\n    form: {\n      artist: \"\",\n      title: \"\",\n      videoID: \"\"\n    },\n    submitable: false,\n    errorMessage: \"\"\n  });\n\n  let videoForm = createRef();\n\n  const { errorMessage } = formState;\n  const hasError = !!errorMessage.length;\n\n  const formContent = FIELDS.map((el, idx) => {\n    const label = el.toUpperCase;\n    return (\n      <div className={classses.inputContainer} key={idx}>\n        <label className={classses.inputLabel}>\n          {el}\n          <input\n            name={el}\n            type=\"text\"\n            className={classses.formInput}\n            value={formState[el]}\n            autoComplete=\"off\"\n            onChange={e => _handleChange(e)}\n            required\n          />\n        </label>\n      </div>\n    );\n  });\n\n  const _updateError = message => {\n    setFormState(prevState => {\n      return {\n        ...prevState,\n        errorMessage: message\n      };\n    });\n  };\n\n  const _validateInput = (name, value) => {\n    switch (name) {\n      case \"videoID\":\n        let invalidUrlErrorMessage = \"URL is invalid\";\n        if (\n          value.length &&\n          /^(https?:\\/\\/)?(www\\.youtube\\.com|youtu\\.?be)\\/.+$/.test(value)\n        ) {\n          invalidUrlErrorMessage = \"\";\n          _updateError(invalidUrlErrorMessage);\n          return true;\n        }\n        _updateError(invalidUrlErrorMessage);\n        return true;\n      default:\n        if (!value.length) {\n          let lengthErrorMessage = \"Please fill out all fields\";\n          _updateError(lengthErrorMessage);\n          return;\n        }\n        _updateError(\"\");\n        return !value.length;\n    }\n  };\n\n  const _extractVideoID = url => url.match(/(^|=|\\/)([0-9A-Za-z_-]{11})(\\/|&|$|\\?|#)/)[2];\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const { onVideoSubmited } = props;\n    const { form } = formState;\n    const updatedData = {\n      ...form,\n      videoID: _extractVideoID(form.videoID)\n    };\n    onVideoSubmited(updatedData);\n    _resetForm();\n  };\n\n  const _handleChange = e => {\n    const { name, value } = e.target;\n    _validateInput(name, value);\n\n    setFormState(prevState => {\n      return {\n        ...prevState,\n        form: {\n          ...prevState.form,\n          [name]: value\n        }\n      };\n    });\n  };\n\n  const _resetForm = () => {\n    videoForm.current.reset();\n  };\n\n  return (\n    <form ref={videoForm} onSubmit={(e) => handleSubmit(e)}>\n      {formContent}\n      <div className={classses.inputContainer}>\n        {hasError ? errorMessage : null}\n        <button disabled={hasError} className={classses.submitButton} type=\"submit\">\n          Add\n        </button>\n      </div>\n    </form>\n  );\n};\n\nAddVideoForm.propTypes = {\n  onVideoSubmited: PropTypes.func.isRequired\n};\n\nexport default AddVideoForm;","\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classes from \"./ListItem.module.scss\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nconst ListItem = ({ data, clickHandler, deleteHandler }) => {\n  const {artist, title, videoID} = data;\n  const video = {artist, title, videoID};\n  const _handleDelete = (e) => {\n    e.preventDefault(); \n    deleteHandler(video);\n  }\n\n  return (\n    <div className={classes.container} onClick={() => clickHandler(video)}>\n      <img className={classes.thumbnail} src={`https://img.youtube.com/vi/${videoID}/default.jpg`} alt=\"\"/>\n      <div className={classes.item}>\n        <div>{artist}</div>\n        <div>{title}</div>\n      </div>\n      <div className={classes.deleteBtnContainer} onClick={_handleDelete}>\n        <FontAwesomeIcon icon=\"times-circle\"/>\n      </div>\n    </div>\n  );\n};\n\nListItem.propTypes = {\n  data: PropTypes.any.isRequired,\n  clickHandler: PropTypes.func,\n  deleteHandler: PropTypes.func,\n};\n\nexport default ListItem;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport ListItem from \"./ListItem/ListItem\";\n\nconst List = props => {\n  const { data, clickHandler, deleteHandler} = props;\n  if(data){\n    return data.map((data, idx) => <ListItem key={idx} data={{...data}} deleteHandler={deleteHandler} clickHandler={clickHandler} />);\n  }\n  return null;\n};\n\nList.propTypes = {\n  clickHandler: PropTypes.func,\n  deleteHandler: PropTypes.func,\n  videos: PropTypes.object\n};\n\nexport default List;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classes from \"./YTPlayer.module.scss\";\nimport YouTube from \"react-youtube\";\n\nconst YTPlayer = ({ selectedVideo, onReady, onEnd, isEmptyPlaylist }) => {\n  const { videoID } = selectedVideo || {};\n\n  const opts = {\n    width: \"100%\",\n    height: \"100%\",\n    playerVars: {\n      autoplay: 1,\n      frameBorder: 0\n    }\n  };\n  const shouldShowMessage = videoID;\n  return (\n    <div className={classes.playerContainer}>\n      {!shouldShowMessage ? (\n        <div className={classes.noVideoSelected}>Add videos to start</div>\n      ) : (\n        <YouTube videoId={videoID} onEnd={onEnd} opts={opts} onReady={onReady} />\n      )}\n    </div>\n  );\n};\n\nYTPlayer.propTypes = {\n  selectedVideo: PropTypes.object,\n  onReady: PropTypes.func.isRequired,\n  onEnd: PropTypes.func.isRequired,\n  isEmptyPlaylist: PropTypes.bool.isRequired\n};\n\nexport default YTPlayer;\n","import { library } from '@fortawesome/fontawesome-svg-core';\nimport { faTimesCircle } from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(faTimesCircle);","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport SplitPane from \"./components/SplitPane/SplitPane\";\nimport AddVideoForm from \"./containers/AddVideoForm/AddVideoForm\";\nimport List from \"./components/List/List\";\nimport YTPlayer from \"./components/YTPlayer/YTPlayer\";\nimport fa from \"./FontAwesome\";\nimport * as actionTypes from \"./store/actions\";\n\nclass App extends Component {\n  state = {\n    videos: [],\n    selectedVideo: {},\n    isEmptyPlaylist: true,\n    continuousPlay: true\n  };\n\n\n  _getInitialVideoID = () => {\n    const { videoID } = this.props.selectedVideo;\n    const { continuousPlay } = this.state;\n    if (videoID) {\n      return videoID;\n    } else if (continuousPlay) {\n      const { videos } = this.props;\n      return videos[0].videoID;\n    }\n  };\n\n  _validateVideo = videoID =>\n    this.state.videos.some(video => video.videoID === videoID);\n\n  onVideoSubmited = video => {\n    const hasVideo = this._validateVideo(video.videoID);\n    if (hasVideo) {\n      alert(\n        `This video from: ${video.artist} with title: ${video.title} already exists in this playlist.`\n      );\n      return;\n    }\n  };\n\n  playNextVideo = previousVideo => {\n    const indexOfCurrent = this.state.videos.findIndex(e => {\n      return e.videoID === previousVideo;\n    });\n    let nextIndex = indexOfCurrent + 1;\n    if (!this.state.videos[nextIndex]) {\n      nextIndex = 0;\n    }\n    this.setState(prevState => {\n      return {\n        ...prevState,\n        selectedVideo: prevState.videos[nextIndex]\n      };\n    });\n  };\n\n  // YTPlayler callbacks\n  onVideoReady = event => {\n    const { videos } = this.props;\n    const isEmptyPlaylist = !(videos && videos.length);\n    if (!isEmptyPlaylist) {\n      const nextVideoID = this._getInitialVideoID();\n      event.target.loadVideoById(nextVideoID);\n    }\n  };\n\n  onVideoPlay = selectedVideo => {\n    const { selectVideo } = this.props;\n    selectVideo(selectedVideo);\n  };\n\n  onEnd = event => {\n    const previousVideo = event.target.getVideoData();\n    if (this.state.continuousPlay) {\n      this.playNextVideo(previousVideo.video_id);\n    }\n  };\n\n  render() {\n    const { videos, selectedVideo, addVideo, removeVideo } = this.props;\n    const isEmptyPlaylist = !!(this.videos && !this.videos.length);\n    return (\n      <SplitPane\n        leftTop={<AddVideoForm onVideoSubmited={addVideo} />}\n        leftBottom={\n          <List\n            clickHandler={this.onVideoPlay}\n            deleteHandler={removeVideo}\n            data={videos}\n          />\n        }\n        right={\n          <YTPlayer\n            isEmptyPlaylist={isEmptyPlaylist}\n            selectedVideo={selectedVideo}\n            onReady={this.onVideoReady}\n            onEnd={this.onEnd}\n          />\n        }\n      />\n    );\n  }\n}\n\nApp.propTypes = {\n  videos: PropTypes.array,\n  selectedVideo: PropTypes.object,\n  selectVideo: PropTypes.func,\n  addVideo: PropTypes.func,\n  removeVideo: PropTypes.func\n};\n\nconst mapStateToProps = state => {\n  return {\n    videos: state.videos,\n    selectedVideo: state.selectedVideo\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addVideo: video =>\n      dispatch({ type: actionTypes.ADD_VIDEO, payload: video }),\n    removeVideo: video =>\n      dispatch({ type: actionTypes.REMOVE_VIDEO, payload: video.videoID }),\n    selectVideo: video => {\n      dispatch({ type: actionTypes.SELECT_VIDEO, payload: video.videoID });\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport throttle from 'lodash/throttle';\n\nimport { createStore } from \"redux\";\n\nimport videosReducer from \"./store/reducers/videos\";\nimport { saveState, loadState } from \"./localStorage\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst storedState = loadState('videorama');\n\nconst store = createStore(videosReducer, storedState);\n\nstore.subscribe(throttle(()=> {\n  const updatedState = store.getState();\n  saveState(\"videorama\", updatedState);\n}), 1000);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const loadState = item => {\n  try {\n    const serializedState = window.localStorage.getItem(item);\n    if (!serializedState) {\n        return undefined;\n    }\n    return JSON.parse(serializedState);\n} catch (err) {\n    console.error(err, \"issues with localStorage\");\n    return undefined;\n  }\n};\n\nexport const saveState = (item, state) => {\n  try {\n    if (!state && state !== \"undefined\") {\n        return undefined;\n    }\n    const serializedState = JSON.stringify(state);\n    window.localStorage.setItem(item, serializedState);\n  } catch (err) {\n    console.error(err, \"issues with localStorage\");\n    return undefined;\n  }\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ListItem_container__1wDrm\",\"item\":\"ListItem_item__El3Yb\",\"deleteBtnContainer\":\"ListItem_deleteBtnContainer__1Kmb_\",\"thumbnail\":\"ListItem_thumbnail__2pBri\"};"],"sourceRoot":""}